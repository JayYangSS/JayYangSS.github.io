---
layout:     post
title:      "开始准备找工作了"
subtitle:   "Review of Java"
author:     "Jayn"
header-img: "/img/post-bg-05.jpg"
tags:
  - Java
---

要开始好好准备找实习，找工作了！

### 1.java中有没有指针？
* java中没有指针，只有引用，也可以说是阉割版的指针，因为C/C++中的指针式可以在内存上任意移动的，不限制内存中数据类型，java中的reference，如`Person P=New Person()`
这个`reference P`就是只能指向类型为`Person`的内存
* C语言的指针可以指向任何地方，只要你愿意，java的引用不行。
* C语言的指针可以参与数值运算，加法、减法，java的引用不行。


### 2.java自动装箱
就是将基本数据类型（java中有8个int,short,long,boolean,char,float,byte,double)自动转换为Integer,Boolean等封装类型，相应的反转换就是自动拆箱

### 3.final与static
* final可以用于修饰非抽象类，非抽象方法

* 用final修饰的成员变量表示常量，一旦给定值，就不能再改变，只能赋值一次
* final变量一般在声明时初始化，这样就是在编译器初始化
* final变量也可以在声明时不初始化，而在构造函数中进行初始化，这样就不是在编译器初始化
* 当参数声明为final时，可以使用该参数，但是不能修改参数（跟C++中的const关键字相同）
* `final`修饰类时，`final类`不能被继承，final类的成员方法不能被覆盖，默认都是final的
final方法不能被子类覆盖
* 使用final方法原因：1.方法锁定，防止集成类修改他的方法和意义；2。高效，编译器遇到final方法会使用内嵌机制（有inline的感觉）

### 4.static方法可以覆盖吗？
当然不可以，因为覆盖是运行时动态绑定的，而static方法是编译时静态绑定的，static方法和任何的实例无关;使用static修饰变量和方法，类的所有实例都共享static修饰的方法和变量，不会有副本；final修饰的变量，每个实例会在创建时创建一个副本到常量池中

### 5.java接口VS抽象类
1. 接口中的方法都是抽象的，没有实现；抽象类中的方法可以有实现，也可以有抽象方法
2. 类实现接口的话必须要实现接口的所有方法，但是继承抽象类则不用实现其中的所有方法
3. 类可以实现多个接口，但只能继承一个抽象类
4. 接口中的成员变量是public static final类型的，接口中不能有变量，必须是常量的，且是只读不能修改的（interface的思想就是提供一个统一的公共的协议）；抽象类中可以有非final变量
5. 接口中的成员函数是public，不允许有private；但是抽象类中可以有private,proteced
6. 接口和抽象类都不可以被实例化

### 6.值传递VS引用传递？

* 对象被值传递，意味着传递了对象的一个副本。因此，就算是改变了对象副本，也不会影响源对象的值。
* 对象被引用传递，意味着传递的并不是实际的对象，而是对象的引用。因此，外部对引用对象所做的改变会反映到所有的对象上。
* 在java中对象作为参数传递时，是把对象在内存中的地址拷贝了一份传给了参数，即引用传递
